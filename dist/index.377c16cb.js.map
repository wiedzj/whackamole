{"mappings":"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","sources":["Code/Play&Win Whack-A-Mole copy 2/config.ts","Code/Play&Win Whack-A-Mole copy 2/mole-hill.ts","Code/Play&Win Whack-A-Mole copy 2/grid.ts","Code/Play&Win Whack-A-Mole copy 2/mole.ts","Code/Play&Win Whack-A-Mole copy 2/mole-spawner.ts","Code/Play&Win Whack-A-Mole copy 2/PlayAndWinPlatform.ts","Code/Play&Win Whack-A-Mole copy 2/game.ts","Code/Play&Win Whack-A-Mole copy 2/main.ts"],"sourcesContent":["export interface Config {\n  rows: number;\n  columns: number;\n  horizonHeight: number;\n  maxMoles: number;\n  moles: MoleType[];\n\n  speedIncrease?: DifficultyIncrease;\n  amountOfMolesIncrease?: DifficultyIncrease;\n\n  lives?: number;\n  time?: number;\n  sprites?: {};\n}\n\nexport interface MoleType {\n  spriteId?: number;\n  color: string;\n  probability: number;\n  time: number;\n  crawlOutTime: number;\n  hit?: RewardPunishment;\n  miss?: RewardPunishment;\n}\n\nexport interface DifficultyIncrease {\n  time: number,\n  increase: number\n}\n\nexport type RewardPunishmentType = \"point\" | \"live\";\n\nexport interface RewardPunishment {\n  type: RewardPunishmentType,\n  amount: number\n}\n\nexport const config: Config = {\n  rows: 4,\n  columns: 4,\n  horizonHeight: 30,\n  maxMoles: 3,\n  lives: 5,\n  // time: 50000,\n\n  speedIncrease: {\n    time: 5000,\n    increase: 1.03\n  },\n  amountOfMolesIncrease: {\n    time: 5000,\n    increase: 1\n  },\n  // time: 20000,\n  sprites: {\n    moleHill: \"./assets/mole-hill.png\",\n    ground: \"./assets/grass2.jpeg\",\n    mole_1: \"./assets/mole1.png\",\n    mole_2: \"./assets/poepie.png\",\n    mole_3: \"./assets/kip.png\"\n  },\n  moles: [\n    {\n    spriteId: 1,\n    color: \"#E6A951\",\n    probability: 20,\n    time: 1000,\n    crawlOutTime: 500,\n    hit:\n      {\n        type: \"point\",\n        amount: 1,\n      },\n    miss:\n      {\n        type: \"live\",\n        amount: -1\n      }\n    },\n    {\n      spriteId: 2,\n      color: \"blue\",\n      probability: 28,\n      time: 500,\n      crawlOutTime: 1000,\n      hit:\n        {\n          type: \"live\",\n          amount: -1,\n        },\n      // miss:\n      //   {\n      //     type: \"live\",\n      //     amount: 0\n      //   }\n    },{\n      spriteId: 3,\n      color: \"yellow\",\n      probability: 4,\n      time: 750,\n      crawlOutTime: 200,\n      hit: {\n        type: \"live\",\n        amount: 1\n      }\n    }\n  ]\n}\n","import { Game } from \"./game\";\nimport { Mole } from \"./mole\";\n\nexport class MoleHill {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  aspectRatio: number = 0;\n\n  mole: Mole | null = null;\n  image: HTMLImageElement | null = null;;\n\n  constructor(x: number, y: number, width: number, height: number, image: HTMLImageElement | undefined){\n    this.x = x;\n    this.y = y;\n\n    this.width = width;\n\n    if(image){\n      this.aspectRatio = image.naturalWidth / width;\n      this.height = image.naturalHeight / this.aspectRatio;\n      this.image = image;\n    } else {\n      this.height = height;\n    }\n\n  }\n\n  render(){\n    if(this.image){\n      Game.drawImage(this.image, this.x, this.y, this.width, this.height)\n    } else {\n      Game.drawShape(\"black\", this.x, this.y, this.width, this.height);\n    }\n  }\n}\n","import { Config } from \"./config\";\nimport { Game } from \"./game\";\nimport { Mole } from \"./mole\";\nimport { MoleHill } from \"./mole-hill\";\n\nexport class Grid {\n\n  moleHills: MoleHill[][] = [];\n\n  constructor(config: Config, moleHill: HTMLImageElement | undefined, floorHeight: number){\n      const rows = config.rows;\n      const cols = config.columns;\n\n      const holeWidth = Game.width / (cols + 1);\n      const holeHeight = floorHeight / (rows + 1);\n\n      const spaceBetweenX = (holeWidth / (cols + 1));\n      const spaceBetweenY = (holeHeight / (rows + 1));\n\n      for(let iRow = 0; iRow < rows; iRow++){\n        let columns: MoleHill[] = [];\n        for(let iCol = 0; iCol < cols; iCol++){\n          const x = spaceBetweenX * (iCol + 1) + holeWidth * iCol;\n          const y = floorHeight - spaceBetweenY * (iRow + 1) - holeHeight * (iRow + 1);\n          columns.push(new MoleHill(x, y, holeWidth, holeHeight, moleHill));\n        }\n        this.moleHills.push(columns);\n      }\n\n  }\n\n  render(){\n    for(let iRow = 0; iRow < this.moleHills.length; iRow++){\n      for(let iCol = 0; iCol < this.moleHills[iRow].length; iCol++){\n        const moleHill: MoleHill = this.moleHills[iRow][iCol];\n        if(moleHill.mole){\n          moleHill.mole.render();\n        }\n        moleHill.render();\n\n      }\n    }\n  }\n\n  update(){\n    for(let iRow = 0; iRow < this.moleHills.length; iRow++){\n      for(let iCol = 0; iCol < this.moleHills[iRow].length; iCol++){\n        const moleHill: MoleHill = this.moleHills[iRow][iCol];\n        if(moleHill.mole){\n          moleHill.mole.update();\n        }\n      }\n    }\n  }\n\n  isEmpty(){\n    for(let iRow = 0; iRow < this.moleHills.length; iRow++){\n      for(let iCol = 0; iCol < this.moleHills[iRow].length; iCol++){\n        const moleHill: MoleHill = this.moleHills[iRow][iCol];\n        if(moleHill.mole){\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n","import { MoleType } from \"./config\";\nimport { Game } from \"./game\";\nimport { MoleHill } from \"./mole-hill\";\n\ninterface HitBox {\n  x1: number,\n  x2: number,\n  y1: number,\n  y2: number\n}\n\nexport class Mole {\n  x: number;\n  y: number;\n  width: number;\n\n  height: number = 0;\n  maxHeight: number;\n  moleHillHeight: number;\n\n  crawlOutTime: number;\n\n  time: number = 0;\n  maxTime: number;\n\n  moleConfig: MoleType;\n\n  hitBoxWidth: number;\n  hitBoxX: number;\n\n  isHit: boolean = false;\n  isMissed: boolean = false;\n\n  img: HTMLImageElement | undefined = undefined;\n  hitImg: HTMLImageElement | undefined = undefined;\n  missImg: HTMLImageElement | undefined = undefined;\n\n  constructor(config: MoleType, moleHill: MoleHill, speedIncrease: number, img?: HTMLImageElement){\n    this.moleConfig = config;\n    this.crawlOutTime = config.crawlOutTime * speedIncrease;\n    this.maxTime = config.time * speedIncrease;\n    this.y = moleHill.y;\n\n    this.hitBoxWidth = moleHill.width;\n    this.hitBoxX = moleHill.x;\n\n    this.moleHillHeight = moleHill.height;\n\n    if(img){\n      this.img = img;\n      this.width = img.naturalWidth / moleHill.aspectRatio;\n      this.maxHeight = img.naturalHeight / moleHill.aspectRatio;\n      this.x = moleHill.x + (moleHill.width - this.width) / 2;\n    } else {\n      this.maxHeight = moleHill.width;\n      this.x = moleHill.x + moleHill.width / 4;\n      this.width = moleHill.width / 2;\n    }\n  }\n\n  hit(){\n    if(this.isHit === true){\n      return;\n    }\n    this.isHit = true;\n    if(this.moleConfig.hit === undefined){\n      return;\n    }\n    switch(this.moleConfig.hit.type){\n      case 'live': {\n        if(Game.lives !== undefined)\n          Game.lives += this.moleConfig.hit.amount;\n        break;\n      }\n      case 'point': {\n        Game.points += this.moleConfig.hit.amount;\n        console.log(Game.points);\n        break;\n      }\n    }\n  }\n\n  getHitBox(): HitBox {\n    return {\n      x1: Math.floor(this.hitBoxX - 2),\n      x2: Math.floor(this.hitBoxX + this.hitBoxWidth + 2),\n      y1: Math.floor(this.y - 2),\n      y2: Math.floor(this.y + this.height + 2)\n    }\n  }\n\n  miss(){\n    if(this.isMissed){\n      return;\n    }\n    this.isMissed = true;\n    if(this.moleConfig.miss === undefined){\n      return;\n    }\n    switch(this.moleConfig.miss.type){\n      case 'live': {\n        if(Game.lives !== undefined && Game.lives !== 0)\n          Game.lives += this.moleConfig.miss.amount;\n        break;\n      }\n      case 'point': {\n        Game.points += this.moleConfig.miss.amount;\n        break;\n      }\n    }\n  }\n\n  render(){\n    if(this.isHit){\n      this.height -= this.maxHeight / (20);\n      if(this.height < 0){\n        this.height = 0;\n      }\n    } else {\n      if(this.height < this.maxHeight && this.time < this.maxTime){\n        this.height += this.maxHeight / (this.crawlOutTime / (1000 /Game.frameRate));\n      } else if(this.time >= this.maxTime){\n        this.height -= this.maxHeight / (this.crawlOutTime / (1000 / Game.frameRate));\n        if(this.height < 0){\n          this.height = 0;\n        }\n      } else {\n        this.time += 1000 / Game.frameRate;\n      }\n\n      \n    }\n\n    if(this.img){\n      Game.drawImage(this.img, this.x, this.y, this.width, this.height, this.isHit ? \"brightness(0%)\" : undefined, this.height / this.maxHeight * 100);\n    } else {\n      Game.drawShape(this.isHit ? \"red\" : this.moleConfig.color, this.x, this.y, this.width, this.height);\n    }\n  }\n\n  update(){\n    if (this.time >= this.maxTime && this.height <= this.moleHillHeight && this.isMissed === false){\n      this.miss();\n    }\n  }\n}\n","import { Config, MoleType } from \"./config\";\nimport { Image } from \"./game\";\nimport { Mole } from \"./mole\";\nimport { MoleHill } from \"./mole-hill\";\n\nexport class MoleSpawner {\n  moleTypes: MoleType[];\n  moleHills: MoleHill[][];\n  spawnedMoles: Mole[] = [];\n  maxMoles: number;\n  speedMultiplyer: number = 1;\n\n  moleImages: Image[] = [];\n\n  spawnList: number[] = [];\n\n  constructor(config: Config, moleHills: MoleHill[][], moleImgs?: Image[]){\n    this.moleTypes = config.moles;\n    this.moleHills = moleHills;\n    this.maxMoles = config.maxMoles;\n\n    if(moleImgs){\n          this.moleImages = moleImgs.sort();\n    }\n    this.generateSpawnList();\n  }\n\n  generateSpawnList(){\n    this.moleTypes.forEach(mole => {\n      for(let i = 0; i < mole.probability; i++){\n        this.spawnList.push(this.moleTypes.indexOf(mole));\n      }\n    });\n  }\n\n  spawn(){\n    if(this.spawnedMoles.length >= this.maxMoles){\n      return;\n    }\n\n    if(this.spawnList.length === 0){\n      this.generateSpawnList();\n    }\n\n    let spawned = false;\n    while(spawned === false){\n      let randomY = Math.round(Math.random() * (this.moleHills.length - 1));\n      let randomX =  Math.round(Math.random() * (this.moleHills[0].length - 1));\n\n      let randomHill = this.moleHills[randomY][randomX];\n\n      if(randomHill.mole === null) {\n        let randomMoleIndex = Math.round(Math.random() * (this.spawnList.length - 1));\n        let randomMole = this.moleTypes[this.spawnList[randomMoleIndex]];\n        this.spawnList.splice(randomMoleIndex, 1);\n\n\n        let moleImg: Image | undefined = undefined;\n        if(randomMole.spriteId){\n          moleImg = this.moleImages.find(img => img.name === \"mole_\" + randomMole.spriteId);\n        }\n        const mole = new Mole(randomMole, randomHill, this.speedMultiplyer, moleImg?.img);\n\n        randomHill.mole = mole;\n        this.spawnedMoles.push(mole);\n\n        spawned = true;\n\n        setTimeout(() => {\n          this.spawnedMoles.splice(this.spawnedMoles.indexOf(mole), 1);\n          randomHill.mole = null;\n        }, (randomMole.crawlOutTime * 2 * this.speedMultiplyer + randomMole.time * this.speedMultiplyer));\n      }\n    }\n\n\n  }\n}\n","// Message to the platform\nexport type EventTypes = 'play' | 'gameover' | 'ready';\nexport interface GameOverData {\n    score: number;\n}\nexport type EventData = GameOverData;\nexport interface GameEvent {\n    eventName: EventTypes;\n    data?: EventData;\n}\n\n// Messages from the platform\nexport type PlatformEventTypes = 'play';\nexport interface PlatFormEvent {\n    eventName: PlatformEventTypes;\n}\n\nexport interface PEWGame {\n   play;\n}\n\nexport class PlayAndWinPlatform {\n  private game: PEWGame;\n  constructor() {\n    console.log('PewPlatform CREATED');\n    window.addEventListener('message', (ev: MessageEvent) => {\n      console.log('RECEIVE message', ev);\n      this.receive(ev.data);\n    });\n\n    if (window === top) {\n      // console.error('THIS GAME CAN ONLY BE PLAYED ON THE PLAYANDWIN PLATFORM');\n      // window.document.body.innerHTML = 'Error: Play and win platform not found';\n      // return;\n    }\n\n    (<any>window).pew = this;\n\n    // this.ready();\n  }\n\n  private receive(data: PlatFormEvent) {\n    console.log('G: RECEIVE', data);\n    switch (data.eventName) {\n      case 'play':\n        this.game.play(); // Send play message to the game\n        break;\n    }\n    // document.getElementById('messages').value = document.getElementById('messages').value + \"\\n\" + data;\n  }\n\n  public init(game: PEWGame, ready: {(): void}) {\n    this.game = game;\n    ready();\n  }\n\n  /**\n   * Retrieve updated score from game\n   */\n  public updatescore(score: number) {\n\n  }\n\n  /**\n   * Retrieve play event when game actualy starts\n   */\n  public gamestarted() {\n    console.log('G: SEND', 'play');\n    this.sendEvent({ eventName: 'play' });\n  }\n\n  public play() {\n    this.game.play();\n  }\n\n  /**\n   * Retrieve gameover event from game whith endsoce\n   */\n  public gameover(score: number) {\n    console.log('G: SEND', 'Gameover');\n    // const score = Math.round(Math.random() * 1000);\n    this.sendEvent({ eventName: 'gameover', data: { score } });\n  }\n\n  /**\n   * Receive ready event from game when allowed to use start\n   */\n  public ready() {\n    console.log('G: SEND', 'Ready');\n    this.sendEvent({ eventName: 'ready' });\n  }\n\n  /**\n   * Send message to the game platform\n   * @param event\n   */\n  private sendEvent(event: GameEvent) {\n    console.log(event);\n    window.top.postMessage(event, '*');\n  }\n}\n","import { config, Config } from \"./config\";\nimport { Grid } from \"./grid\";\nimport { MoleSpawner } from \"./mole-spawner\";\nimport { PlayAndWinPlatform } from \"./PlayAndWinPlatform\";\n\nexport interface Image {\n  name: string,\n  img: HTMLImageElement | undefined\n}\n\nexport class Game {\n  static ctx: CanvasRenderingContext2D;\n  static width: number;\n  static height: number;\n\n  static points: number = 0;\n  static lives: number | undefined = undefined;\n  static timeLeft: number | undefined = undefined;\n\n  gameLoop: number;\n\n  time: number = 0;\n\n  tapToPlay: boolean = true;\n  playing: boolean = false;\n  gameOver: boolean = false;\n  finalScore: number | null = null;\n\n  config: Config;\n\n  grid: Grid;\n  moleSpawner: MoleSpawner;\n\n  images: Image[] = [];\n\n  skyImage: ImageBitmap | null = null;\n  floorImage: HTMLImageElement | undefined = undefined;\n\n  pew: PlayAndWinPlatform;\n\n  imageTimer: number = 0;\n\n  static frameRate: number = 100;\n\n  constructor(){\n    this.getSettingsFromURI(location.search);\n\n    document.addEventListener('DOMContentLoaded', () => { this.preload(); });\n    window.addEventListener('resize', ()=> {\n      Game.height = window.innerHeight;\n      Game.width = window.innerWidth;\n      const canvas = document.getElementById(\"canvas\");\n      Game.ctx = canvas.getContext(\"2d\");\n      Game.ctx.canvas.height = Game.height;\n      Game.ctx.canvas.width = Game.width;\n      });\n  }\n\n  restart(){\n    clearInterval(this.gameLoop);\n    this.time = 0;\n    this.moleSpawner.maxMoles = this.config.maxMoles;\n    this.moleSpawner.speedMultiplyer = 1;\n    console.log(this.moleSpawner.speedMultiplyer);\n    Game.lives = this.config.lives;\n    Game.timeLeft = this.config.time;\n    Game.points = 0;\n    this.finalScore = null;\n    this.gameOver = false;\n    this.playing = false;\n    this.tapToPlay = true;\n  }\n\n\n  public play(){\n    this.gameLoop = setInterval(()=>{\n      this.render();\n      if(this.playing && !this.gameOver)\n      this.update();\n    }, 1000 / Game.frameRate);\n  }\n\n  preload(){\n    if(this.config.sprites === undefined){\n      return;\n    }\n    for(const [key, value] of Object.entries(this.config.sprites)){\n      let img = new Image();\n      img.onload = () => {\n        this.images.push({\n          img: img,\n          name: key\n        })\n        this.imageReady();\n      }\n      img.onerror = () => {\n        this.images.push({\n          name: key,\n          img: undefined\n        });\n        this.imageReady();\n      }\n      this.imageTimer += 1;\n      img.src = value.toString();\n    }\n  }\n\n  imageReady(){\n    this.imageTimer--;\n    if(this.imageTimer === 0){\n      console.log(\"Start loading\")\n      this.load();\n    }\n  }\n\n  \n\n  load(){\n    console.log(\"LOAD\")\n    const canvas = document.getElementById(\"canvas\");\n\n    canvas.addEventListener(\"click\", (e)=> {\n      this.canvasClicked(e as MouseEvent);\n    })\n\n    canvas.addEventListener(\"touchstart\", (e)=> {\n      for(let touch of e.touches){\n        this.canvasClicked(touch);\n      }\n    })\n\n    Game.ctx = canvas.getContext(\"2d\");\n    \n    Game.height = window.innerHeight;\n    Game.width = window.innerWidth;\n    Game.ctx.canvas.height = Game.height;\n    Game.ctx.canvas.width = Game.width;\n\n    Game.lives = this.config.lives;\n    Game.timeLeft = this.config.time;\n\n    // Game.frameRate = this.config.frameRate;\n\n    const moleHillImg = this.images.find(img => img.name === \"moleHill\")?.img;\n\n    this.floorImage = this.images.find(img => img.name === \"ground\")?.img;\n\n    const moleImgs = this.images.filter(img => img.name.split(\"_\")[0] === \"mole\");\n\n    let groundHeight = Game.height * this.config.horizonHeight / 100;\n\n    this.grid = new Grid(this.config, moleHillImg, groundHeight);\n    this.moleSpawner = new MoleSpawner(this.config, this.grid.moleHills, moleImgs);\n\n    this.pew = new PlayAndWinPlatform();\n    this.pew.ready();\n\n    this.pew.init(this, () => {\n      this.play;\n    });\n  }\n\n  canvasClicked(e: MouseEvent | Touch){\n    if(this.tapToPlay){\n      this.tapToPlay = false;\n      setTimeout(() => {\n        this.pew.gamestarted();\n        this.playing = true;\n      }, 1000)\n      return;\n    }\n    let x: number, y: number;\n    x = e.clientX;\n    y = Game.height - e.clientY;\n    \n    let moles = this.moleSpawner.spawnedMoles.sort((a, b)=> {return a.y - b.y})\n\n    for(let i = 0; i < moles.length; i++){\n      const mole = moles[i];\n      const hitbox = mole.getHitBox();\n      if(x > hitbox.x1 && x < hitbox.x2 && y > hitbox.y1 && y < hitbox.y2){\n        mole.hit();\n        break;\n      }\n    }\n  }\n\n  render(){\n    // Sky\n    Game.ctx.clearRect(0, 0, Game.width, Game.height);\n    Game.drawShape(\"#33A8FF\", 0, 0, Game.width, Game.height);\n\n    if(!this.gameOver && !this.tapToPlay){\n      Game.drawText(Game.points.toString(), 20, Game.height - 40, \"30px Arial\", \"white\", \"start\");\n    if(Game.lives !== undefined){\n      Game.drawText(Game.lives.toString(), Game.width - 40, Game.height - 40, \"30px Arial\", \"white\", \"end\");\n      Game.drawText(\" ♥︎ \", Game.width - 40 , Game.height - 38, \"30px Arial\", \"red\", \"start\");\n    }\n\n    if(Game.timeLeft !== undefined){\n      Game.drawText(Math.ceil(Game.timeLeft/1000).toString(), Game.width * (11/20), Game.height - 38, \"30px Arial\", \"white\", \"end\");\n      Game.drawText(\" ⨶ \", Game.width * (11/20) , Game.height - 38, \"30px Arial\", \"black\", \"start\");\n    }\n    }\n    // Ground\n    if(this.floorImage){\n      Game.drawImage(this.floorImage, 0, 0, Game.width, Game.height * this.config.horizonHeight / 100);\n    } else {\n      Game.drawShape(\"green\", 0, 0, Game.width, Game.height * this.config.horizonHeight / 100);\n    }\n\n    this.grid.render();\n\n    if(this.tapToPlay && !this.gameOver){\n      Game.drawShape(\"rgba(0, 0, 0, 0.5)\", 0, 0, Game.width, Game.height);\n      Game.drawText(\"Tap to play\", Game.width / 2, Game.height - 40, \"30px Arial\", \"white\", \"center\");\n\n    }\n\n    if(this.gameOver){\n      Game.drawShape(\"rgba(0, 0, 0, 0.5)\", 0, 0, Game.width, Game.height);\n      Game.drawText(\"GAME OVER - Score: \" + this.finalScore, Game.width / 2, Game.height - 40, \"30px Arial\", \"white\", \"center\");\n    }\n    \n  }\n\n  update(){\n    if(this.gameOver){\n      return;\n    }\n    this.time += 1000 / Game.frameRate\n    if(this.time > 0){\n      if(this.config.speedIncrease && (this.time % this.config.speedIncrease.time === 0)){\n        if(this.moleSpawner.speedMultiplyer - (this.config.speedIncrease.increase - 1) > 0)\n        this.moleSpawner.speedMultiplyer -= (this.config.speedIncrease.increase - 1);\n      }\n      if(this.config.amountOfMolesIncrease && (this.time % this.config.amountOfMolesIncrease.time === 0)){\n        if((this.moleSpawner.maxMoles + this.config.amountOfMolesIncrease.increase) < (this.config.columns * this.config.rows - 2)){\n          this.moleSpawner.maxMoles += this.config.amountOfMolesIncrease.increase;\n        }\n      }\n\n    if(this.gameOver === false && ((Game.timeLeft !== undefined && Game.timeLeft === 0) || (Game.lives !== undefined && Game.lives === 0))){\n      this.finalScore = Game.points;\n      this.gameOver = true;\n      this.playing = false;\n\n      setTimeout(() => {\n        this.restart();\n        this.pew.gameover(this.finalScore);\n      }, 2000)\n      \n      \n\n\n      setTimeout(() => {\n        this.pew.ready();\n      }, 4000)\n\n      \n\n\n      return;\n    }\n      if(Game.timeLeft){\n        Game.timeLeft -= 10;\n      }\n      this.grid.update();\n      this.moleSpawner.spawn();\n\n    }\n  }\n\n  static drawImage(image: HTMLImageElement, x: number, y: number, width: number, height: number, filter?: string, crop?: number){\n    if(this.ctx === null){\n      return;\n    }\n    // Translate Y\n    y = this.height - y - height;\n    if(filter){\n      this.ctx.filter = filter;\n    }\n    if(crop === undefined){\n      this.ctx.drawImage(image, x, y, width, height);\n    } else {\n      const sx = 0;\n      const sy = 0;\n      const sw = image.naturalWidth;\n      const sh = image.naturalHeight * crop / 100;\n      this.ctx.drawImage(image, sx, sy, sw, sh, x, y, width, height);\n    }\n    this.ctx.filter = \"none\"\n  }\n\n  static drawShape(color: string,x: number, y: number, width: number, height: number){\n    if(this.ctx === null){\n      return;\n    }\n    if(height < 0){\n      height = 0;\n    }\n    // Translate Y\n    y = this.height - y - height;\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(x, y, width, height);\n  }\n\n  static drawText(text: string, x: number, y: number, font: string, color: string = \"white\", align: CanvasTextAlign = \"center\"){\n    if(this.ctx === null){\n      return;\n    }\n    y = this.height - y;\n\n    this.ctx.textAlign = align;\n    this.ctx.font = font;\n    this.ctx.fillStyle = color;\n    this.ctx.fillText(text, x, y);\n  }\n\n  getSettingsFromURI(uri: string){\n    this.config = config;\n    return;\n    let settingString;\n    const split = uri.split(\"&\")\n    for(let s of split){\n      if(s[0] === \"s\"){\n        settingString = atob(s.split(\"=\")[1]);\n      }\n    }\n\n    if(settingString === undefined){\n      this.config = config;\n      return;\n    }\n\n    let jsonString = \"{\";\n\n    let settings = settingString.split(\"\\n\");\n    settings.forEach(s => {\n      const keyAndValue = s.split(\"=\");\n      if(keyAndValue.length === 1){\n        return;\n      }\n      let line = '\"' + keyAndValue[0] + '\": ' + keyAndValue[1];\n      if(settings.indexOf(s) < (settings.length - 1)){\n        line += \",\";\n      }\n\n      jsonString += line;\n\n    });\n    jsonString += \"}\";\n    this.config = JSON.parse(jsonString);\n  }\n}\n\n","import { Game } from './game';\n\nconst game = new Game();\n\n// document.getElementById('btnReplay').addEventListener('click', (e) => {\n//   // game.replay();\n// });\n"],"names":["$29570dc5b53425c5$export$e506a1d27d1eaa20","rows","columns","horizonHeight","maxMoles","lives","speedIncrease","time","increase","amountOfMolesIncrease","sprites","moleHill","ground","mole_1","mole_2","mole_3","moles","spriteId","color","probability","crawlOutTime","hit","type","amount","miss","$49c42dc66327109c$export$b29d0fb048b26c2","x","y","width","height","image","this","aspectRatio","mole","naturalWidth","naturalHeight","render","$544de6131768b4ac$export$985739bfa5723e08","drawImage","drawShape","$8b2d988abe1b4e3a$export$ef2184bd89960b14","config","floorHeight","moleHills","cols","holeWidth","holeHeight","spaceBetweenX","spaceBetweenY","iRow","iCol","push","length","update","isEmpty","$6d57c927b97d8609$export$fe39c5641f2a6b9a","img","isHit","isMissed","undefined","hitImg","missImg","moleConfig","maxTime","hitBoxWidth","hitBoxX","moleHillHeight","maxHeight","points","console","log","getHitBox","x1","Math","floor","x2","y1","y2","frameRate","$e6762b35c3ac0780$export$6590bd73ac104d20","moleImgs","spawnedMoles","speedMultiplyer","moleImages","spawnList","moleTypes","sort","generateSpawnList","forEach","i","indexOf","spawn","spawned","randomY","round","random","randomX","randomHill","moleImg","randomMoleIndex","randomMole","splice","find","name","setTimeout","$fc2c4e45e9da4c66$export$39de2c1faf6101a2","window","addEventListener","ev","receive","data","pew","eventName","game","play","init","ready","updatescore","score","gamestarted","sendEvent","gameover","score1","event","top","postMessage","tapToPlay","playing","gameOver","finalScore","images","skyImage","floorImage","imageTimer","getSettingsFromURI","location","search","document","preload","innerHeight","innerWidth","canvas","getElementById","ctx","getContext","restart","clearInterval","gameLoop","moleSpawner","timeLeft","setInterval","key","value","Object","entries","Image","onload","imageReady","onerror","src","toString","load","e","canvasClicked","touch","touches","moleHillImg","filter","split","groundHeight","grid","clientX","clientY","a","b","hitbox","clearRect","drawText","ceil","crop","sx","sy","sw","sh","width1","height1","fillStyle","fillRect","text","font","color1","align","textAlign","fillText","uri"],"version":3,"file":"index.377c16cb.js.map"}